name: Publish .NET Package

on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string
      bump:
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Determine version
        id: ver
        working-directory: ${{ inputs.package }}
        run: |
          # Default bump type is patch
          BUMP="${{ inputs.bump }}"
          if [ -z "$BUMP" ]; then
            BUMP="patch"
          fi

          cd $PWD

          # Find last nupkg
          NUPKG_FILE=$(ls bin/Release/*.nupkg 2>/dev/null | sort -V | tail -n1 || true)

          if [ -z "$NUPKG_FILE" ]; then
            CURRENT="1.0.0"
          else
            BASENAME=$(basename "$NUPKG_FILE")
            CURRENT=$(echo "$BASENAME" | sed -E 's/.*\.([0-9]+\.[0-9]+\.[0-9]+)\.nupkg/\1/')
          fi

          echo "Current version: $CURRENT"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEXT="$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEXT"
          echo "NEXT_VERSION=$NEXT" >> $GITHUB_ENV

          # Update csproj if exists
          CSPROJ_FILE=$(ls *.csproj | head -n1 || true)
          if [ -n "$CSPROJ_FILE" ]; then
            if grep -q "<Version>" "$CSPROJ_FILE"; then
              sed -i "s|<Version>.*</Version>|<Version>$NEXT</Version>|" "$CSPROJ_FILE"
            else
              sed -i "0,/<PropertyGroup>/s|<PropertyGroup>|<PropertyGroup>\n  <Version>$NEXT</Version>|" "$CSPROJ_FILE"
            fi
          fi

      - name: Build & Pack
        working-directory: ${{ inputs.package }}
        run: |
          dotnet restore
          dotnet build -c Release
          dotnet pack -c Release /p:PackageVersion=${{ env.NEXT_VERSION }} --no-build

      - name: Push to GitHub Packages
        working-directory: ${{ inputs.package }}
        run: |
          lib=$(basename "${{ inputs.package }}")
          dotnet nuget push "bin/Release/${lib}.${{ env.NEXT_VERSION }}.nupkg" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }}

      - name: Commit & Tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "Bump ${{ inputs.package }} to v${{ env.NEXT_VERSION }}"
          git tag v${{ env.NEXT_VERSION }}
          git push --follow-tags
